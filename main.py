import logging
import re
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from datetime import datetime, timedelta

# ุจูุงูุงุช ุงูุฃุฏูู ูุงูุจูุช
ADMIN_ID = 7249021797  # ูุนุฑูู ุนูู ุชูููุฌุฑุงู (int)
TOKEN = "8065737535:AAFoeDvK5P94YAcRwixjjfB4olR3iD2kHsw"

# ูุงุฆูุฉ ุงูุณุจุงู ุงููุคูุช
SPAM_USERS = {}

# ุฑุณุงุฆู ุงูุจูุช
WELCOME_MESSAGE = (
    "โจ ุฃููุงู ุจู ูู ูุฑูุฒ ุงูุฏุนู ุงูุณุฑู โจ\n\n"
    "ููุง ููุท ูุฏุนู ุงูุฑุตูุฏ (ุขุณูุง/ุฒูู). ุฃุฑุณู ููุฏ ุงูุฑุตูุฏ (16 ุฃู 17 ุฑูู) ุฃู ุตูุฑุฉ ูุงุถุญุฉ ูููุงุฑุช.\n"
    "ุฃู ูุฎุงููุฉ (ุตูุฑ ุนุดูุงุฆูุฉุ ุตูุฑ ุบูุฑ ุงูุฑุตูุฏุ ุฑุณุงุฆู ุณุจ/ุนุดูุงุฆูุฉ) = ุณุจุงู/ุญุธุฑ ูุคูุช 10 ุฏูุงุฆู."
)

SUCCESS_MESSAGE = "โ ุชู ุงุณุชูุงู ุฑุณุงูุชู ุจูุฌุงุญ! ุดูุฑุงู ูุฏุนูู ูุง ุจุทู. ๐น"
ERROR_MESSAGE = (
    "๐ซ ููุท ุตูุฑ ูุงุฑุช ุงูุฑุตูุฏ ุงูุฃุตููุฉ ุฃู ุฑูู ุงูุฑุตูุฏ. "
    "ุฃู ุตูุฑุฉ ุฃุฎุฑู ุฃู ุฑุณุงูุฉ ุนุดูุงุฆูุฉ ุชุนุชุจุฑ ูุฎุงููุฉ.\nุชู ุญุธุฑู ูุคูุชุงู ููุฏุฉ 10 ุฏูุงุฆู."
)
SPAM_MESSAGE = "๐ซ ุฃูุช ูุญุธูุฑ ูุคูุชุงู! ุญุงูู ุจุนุฏ 10 ุฏูุงุฆู."

# ุฏุงูุฉ ุงูุชุญูู ูู ููุฏ ุงูุฑุตูุฏ
def is_recharge_code(text):
    return bool(re.fullmatch(r"\d{16,17}", text.strip()))

# ุฏุงูุฉ ุชุญูู ุงูุณุจุงู
def is_spam(user_id):
    now = datetime.now()
    if user_id in SPAM_USERS:
        until = SPAM_USERS[user_id]
        if now < until:
            return True
        else:
            del SPAM_USERS[user_id]
    return False

# ุฅุถุงูุฉ ูููุฎุงูููู
def add_spam(user_id):
    SPAM_USERS[user_id] = datetime.now() + timedelta(minutes=10)

# ุฑุณุงูุฉ ุงูุชุฑุญูุจ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE)

# ุงุณุชูุจุงู ุงูุฑุณุงุฆู
async def handle_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg = update.message

    # ุณุจุงูุ
    if is_spam(user.id):
        await msg.reply_text(SPAM_MESSAGE)
        return

    # ูุต ููุท (ููุฏ ุฑุตูุฏ)
    if msg.text:
        if is_recharge_code(msg.text):
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"๐ณ ุฑุตูุฏ ุฌุฏูุฏ: `{msg.text}`\nID: `{user.id}`", parse_mode="Markdown")
            await msg.reply_text(SUCCESS_MESSAGE)
        else:
            add_spam(user.id)
            await msg.reply_text(ERROR_MESSAGE)
        return

    # ุตูุฑุฉ ููุท
    if msg.photo:
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=msg.photo[-1].file_id, caption=f"๐ณ ุฑุตูุฏ ุจุตูุฑุฉ ูู ุดุฎุต ูุฌููู\nID: `{user.id}`", parse_mode="Markdown")
        await msg.reply_text(SUCCESS_MESSAGE)
        return

    # ุบูุฑ ุฐูู = ุณุจุงู
    add_spam(user.id)
    await msg.reply_text(ERROR_MESSAGE)

# MAIN
def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL, handle_msg))
    app.run_polling()

if __name__ == "__main__":
    main()